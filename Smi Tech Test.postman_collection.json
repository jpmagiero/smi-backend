{
	"info": {
		"_postman_id": "d28ad564-f16d-47ae-abbc-c501e750ea06",
		"name": "Smi Tech Test",
		"description": "# üöÄ Get started here\n\nThis collection guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this collection**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these request types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT and PATCH requests.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a variable called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more scripts in \"Tests\" to verify if the API works as expected and execute flows.\n    \n\n## ‚ÑπÔ∏è Resources\n\n[Building requests](https://learning.postman.com/docs/sending-requests/requests/)  \n[Authorizing requests](https://learning.postman.com/docs/sending-requests/authorization/)  \n[Using variables](https://learning.postman.com/docs/sending-requests/variables/)  \n[Managing environments](https://learning.postman.com/docs/sending-requests/managing-environments/)  \n[Writing scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18980141"
	},
	"item": [
		{
			"name": "Demand",
			"item": [
				{
					"name": "Get Demands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/demands?cursor=1&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands"
							],
							"query": [
								{
									"key": "cursor",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Demands by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/demands/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Demands Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/demands/1/?cursor=0&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands",
								"1",
								""
							],
							"query": [
								{
									"key": "cursor",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Demands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startDate\": \"2025-05-01\",\n  \"endDate\": \"2025-05-31\",\n  \"items\": [\n    { \"itemId\": 1, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 2, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 3, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 4, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 5, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 6, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 7, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 8, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 9, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 10, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 11, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 12, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 13, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 14, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 15, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 16, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 17, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 18, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 19, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 20, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 21, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 22, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 23, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 24, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 25, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 26, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 27, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 28, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 29, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 30, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 31, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 32, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 33, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 34, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 35, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 36, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 37, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 38, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 39, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 40, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 41, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 42, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 43, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 44, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 45, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 46, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 47, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 48, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 49, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 50, \"totalPlan\": 100, \"totalProduced\": 0 }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Post Demands Planning with 50 items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startDate\": \"2025-05-01\",\n  \"endDate\": \"2025-05-31\",\n  \"items\": [\n    { \"itemId\": 1, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 2, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 3, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 4, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 5, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 6, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 7, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 8, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 9, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 10, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 11, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 12, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 13, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 14, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 15, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 16, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 17, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 18, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 19, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 20, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 21, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 22, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 23, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 24, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 25, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 26, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 27, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 28, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 29, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 30, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 31, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 32, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 33, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 34, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 35, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 36, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 37, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 38, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 39, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 40, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 41, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 42, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 43, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 44, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 45, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 46, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 47, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 48, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 49, \"totalPlan\": 100, \"totalProduced\": 0 },\n    { \"itemId\": 50, \"totalPlan\": 100, \"totalProduced\": 0 }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Post Demands In Progress with 50 items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startDate\": \"2025-05-01\",\n  \"endDate\": \"2025-05-31\",\n  \"items\": [\n    { \"itemId\": 1, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 2, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 3, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 4, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 5, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 6, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 7, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 8, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 9, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 10, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 11, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 12, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 13, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 14, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 15, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 16, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 17, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 18, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 19, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 20, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 21, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 22, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 23, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 24, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 25, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 26, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 27, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 28, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 29, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 30, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 31, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 32, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 33, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 34, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 35, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 36, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 37, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 38, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 39, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 40, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 41, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 42, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 43, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 44, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 45, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 46, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 47, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 48, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 49, \"totalPlan\": 100, \"totalProduced\": 50 },\n    { \"itemId\": 50, \"totalPlan\": 100, \"totalProduced\": 50 }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Post Demands Completed with 50 items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startDate\": \"2025-05-01\",\n  \"endDate\": \"2025-05-31\",\n  \"items\": [\n    { \"itemId\": 1, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 2, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 3, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 4, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 5, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 6, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 7, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 8, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 9, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 10, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 11, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 12, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 13, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 14, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 15, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 16, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 17, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 18, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 19, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 20, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 21, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 22, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 23, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 24, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 25, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 26, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 27, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 28, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 29, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 30, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 31, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 32, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 33, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 34, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 35, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 36, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 37, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 38, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 39, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 40, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 41, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 42, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 43, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 44, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 45, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 46, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 47, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 48, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 49, \"totalPlan\": 100, \"totalProduced\": 100 },\n    { \"itemId\": 50, \"totalPlan\": 100, \"totalProduced\": 100 }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Demands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startDate\": \"2023-01-01T00:00:00.000Z\",\n  \"endDate\": \"2023-01-31T00:00:00.000Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Demands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands",
								"5"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Post Demands Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"itemId\": 3,\n            \"totalPlan\": 100,\n            \"totalProduced\": 100\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands/1/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands",
								"1",
								"items"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete Demands Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Patch Demand Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"totalPlan\": 100,\n  \"totalProduced\": 50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/demands/items/16",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"demands",
								"items",
								"16"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Item",
			"item": [
				{
					"name": "Get Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Items by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  { \"sku\": \"1001\", \"description\": \"Latinha Vermelha\" },\n  { \"sku\": \"1002\", \"description\": \"Latinha Azul\" },\n  { \"sku\": \"1003\", \"description\": \"Latinha Dourada\" },\n  { \"sku\": \"1004\", \"description\": \"Latinha Preta\" },\n  { \"sku\": \"1005\", \"description\": \"Latinha Rosa\" },\n  { \"sku\": \"1006\", \"description\": \"Latinha Vermelha com Azul\" },\n  { \"sku\": \"1007\", \"description\": \"Latinha Azul com Dourado\" },\n  { \"sku\": \"1008\", \"description\": \"Latinha Preta com Dourado\" },\n  { \"sku\": \"1009\", \"description\": \"Latinha Rosa com Azul\" },\n  { \"sku\": \"1010\", \"description\": \"Latinha Verde\" },\n  { \"sku\": \"1011\", \"description\": \"Latinha Verde com Dourado\" },\n  { \"sku\": \"1012\", \"description\": \"Latinha Verde com Rosa\" },\n  { \"sku\": \"1013\", \"description\": \"Latinha Azul com Verde\" },\n  { \"sku\": \"1014\", \"description\": \"Latinha Vermelha com Dourado\" },\n  { \"sku\": \"1015\", \"description\": \"Latinha Preta com Azul\" },\n  { \"sku\": \"1016\", \"description\": \"Latinha Rosa com Dourado\" },\n  { \"sku\": \"1017\", \"description\": \"Latinha Amarela\" },\n  { \"sku\": \"1018\", \"description\": \"Latinha Amarela com Azul\" },\n  { \"sku\": \"1019\", \"description\": \"Latinha Amarela com Dourado\" },\n  { \"sku\": \"1020\", \"description\": \"Latinha Amarela com Rosa\" },\n  { \"sku\": \"1021\", \"description\": \"Latinha Azul Claro\" },\n  { \"sku\": \"1022\", \"description\": \"Latinha Azul Claro com Rosa\" },\n  { \"sku\": \"1023\", \"description\": \"Latinha Azul Claro com Verde\" },\n  { \"sku\": \"1024\", \"description\": \"Latinha Verde com Azul Claro\" },\n  { \"sku\": \"1025\", \"description\": \"Latinha Preta com Amarelo\" },\n  { \"sku\": \"1026\", \"description\": \"Latinha Rosa com Amarelo\" },\n  { \"sku\": \"1027\", \"description\": \"Latinha Verde com Preto\" },\n  { \"sku\": \"1028\", \"description\": \"Latinha Dourada com Preto\" },\n  { \"sku\": \"1029\", \"description\": \"Latinha Preta com Rosa\" },\n  { \"sku\": \"1030\", \"description\": \"Latinha Azul com Preto\" },\n  { \"sku\": \"1031\", \"description\": \"Latinha Azul Escuro\" },\n  { \"sku\": \"1032\", \"description\": \"Latinha Azul Escuro com Dourado\" },\n  { \"sku\": \"1033\", \"description\": \"Latinha Azul Escuro com Vermelho\" },\n  { \"sku\": \"1034\", \"description\": \"Latinha Azul Escuro com Rosa\" },\n  { \"sku\": \"1035\", \"description\": \"Latinha Roxa\" },\n  { \"sku\": \"1036\", \"description\": \"Latinha Roxa com Azul\" },\n  { \"sku\": \"1037\", \"description\": \"Latinha Roxa com Rosa\" },\n  { \"sku\": \"1038\", \"description\": \"Latinha Roxa com Preto\" },\n  { \"sku\": \"1039\", \"description\": \"Latinha Branca\" },\n  { \"sku\": \"1040\", \"description\": \"Latinha Branca com Azul\" },\n  { \"sku\": \"1041\", \"description\": \"Latinha Branca com Rosa\" },\n  { \"sku\": \"1042\", \"description\": \"Latinha Branca com Preto\" },\n  { \"sku\": \"1043\", \"description\": \"Latinha Branca com Dourado\" },\n  { \"sku\": \"1044\", \"description\": \"Latinha Branca com Vermelho\" },\n  { \"sku\": \"1045\", \"description\": \"Latinha Vermelha com Branco\" },\n  { \"sku\": \"1046\", \"description\": \"Latinha Azul com Branco\" },\n  { \"sku\": \"1047\", \"description\": \"Latinha Rosa com Branco\" },\n  { \"sku\": \"1048\", \"description\": \"Latinha Preta com Branco\" },\n  { \"sku\": \"1049\", \"description\": \"Latinha Verde com Branco\" },\n  { \"sku\": \"1050\", \"description\": \"Latinha Dourada com Branco\" },\n  { \"sku\": \"1051\", \"description\": \"Latinha Laranja\" },\n  { \"sku\": \"1052\", \"description\": \"Latinha Laranja com Azul\" },\n  { \"sku\": \"1053\", \"description\": \"Latinha Laranja com Rosa\" },\n  { \"sku\": \"1054\", \"description\": \"Latinha Laranja com Vermelho\" },\n  { \"sku\": \"1055\", \"description\": \"Latinha Laranja com Dourado\" },\n  { \"sku\": \"1056\", \"description\": \"Latinha Azul Pastel\" },\n  { \"sku\": \"1057\", \"description\": \"Latinha Azul Pastel com Branco\" },\n  { \"sku\": \"1058\", \"description\": \"Latinha Rosa Pastel\" },\n  { \"sku\": \"1059\", \"description\": \"Latinha Rosa Pastel com Azul\" },\n  { \"sku\": \"1060\", \"description\": \"Latinha Preta Fosca\" },\n  { \"sku\": \"1061\", \"description\": \"Latinha Preta Fosca com Azul\" },\n  { \"sku\": \"1062\", \"description\": \"Latinha Azul Fosca\" },\n  { \"sku\": \"1063\", \"description\": \"Latinha Azul Fosca com Vermelho\" },\n  { \"sku\": \"1064\", \"description\": \"Latinha Vermelha Fosca\" },\n  { \"sku\": \"1065\", \"description\": \"Latinha Vermelha Fosca com Preto\" },\n  { \"sku\": \"1066\", \"description\": \"Latinha Rosa Fosca\" },\n  { \"sku\": \"1067\", \"description\": \"Latinha Rosa Fosca com Branco\" },\n  { \"sku\": \"1068\", \"description\": \"Latinha Dourada Fosca\" },\n  { \"sku\": \"1069\", \"description\": \"Latinha Verde Lim√£o\" },\n  { \"sku\": \"1070\", \"description\": \"Latinha Verde Lim√£o com Preto\" },\n  { \"sku\": \"1071\", \"description\": \"Latinha Verde Lim√£o com Rosa\" },\n  { \"sku\": \"1072\", \"description\": \"Latinha Verde Lim√£o com Azul\" },\n  { \"sku\": \"1073\", \"description\": \"Latinha Verde Lim√£o com Branco\" },\n  { \"sku\": \"1074\", \"description\": \"Latinha Cinza\" },\n  { \"sku\": \"1075\", \"description\": \"Latinha Cinza com Preto\" },\n  { \"sku\": \"1076\", \"description\": \"Latinha Cinza com Azul\" },\n  { \"sku\": \"1077\", \"description\": \"Latinha Cinza com Dourado\" },\n  { \"sku\": \"1078\", \"description\": \"Latinha Rosa Neon\" },\n  { \"sku\": \"1079\", \"description\": \"Latinha Rosa Neon com Azul\" },\n  { \"sku\": \"1080\", \"description\": \"Latinha Azul Neon\" },\n  { \"sku\": \"1081\", \"description\": \"Latinha Azul Neon com Branco\" },\n  { \"sku\": \"1082\", \"description\": \"Latinha Amarela Neon\" },\n  { \"sku\": \"1083\", \"description\": \"Latinha Amarela Neon com Dourado\" },\n  { \"sku\": \"1084\", \"description\": \"Latinha Preta com Azul Neon\" },\n  { \"sku\": \"1085\", \"description\": \"Latinha Dourada com Verde Neon\" },\n  { \"sku\": \"1086\", \"description\": \"Latinha Laranja Neon\" },\n  { \"sku\": \"1087\", \"description\": \"Latinha Laranja Neon com Azul\" },\n  { \"sku\": \"1088\", \"description\": \"Latinha Branca com Neon\" },\n  { \"sku\": \"1089\", \"description\": \"Latinha Multicolorida\" },\n  { \"sku\": \"1090\", \"description\": \"Latinha Camale√£o\" },\n  { \"sku\": \"1091\", \"description\": \"Latinha Camale√£o com Rosa\" },\n  { \"sku\": \"1092\", \"description\": \"Latinha Camale√£o com Azul\" },\n  { \"sku\": \"1093\", \"description\": \"Latinha Camale√£o com Preto\" },\n  { \"sku\": \"1094\", \"description\": \"Latinha Camale√£o com Verde\" },\n  { \"sku\": \"1095\", \"description\": \"Latinha Camale√£o com Dourado\" },\n  { \"sku\": \"1096\", \"description\": \"Latinha Hologr√°fica\" },\n  { \"sku\": \"1097\", \"description\": \"Latinha Hologr√°fica com Rosa\" },\n  { \"sku\": \"1098\", \"description\": \"Latinha Hologr√°fica com Azul\" },\n  { \"sku\": \"1099\", \"description\": \"Latinha Hologr√°fica com Dourado\" },\n  { \"sku\": \"1100\", \"description\": \"Latinha Personalizada com Logo\" }\n]\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sku\": \"SKU123\",\n  \"description\": \"Product description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}